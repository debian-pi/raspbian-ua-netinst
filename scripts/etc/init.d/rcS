#!/bin/busybox sh

LOGFILE=/tmp/raspbian-ua-netinst.log

# default options, can be overriden in installer-config.txt
preset=server
packages=
mirror=http://mirrordirector.raspbian.org/raspbian/
release=wheezy
hostname=pi
label=raspberrypi
domainname=
rootpw=raspbian
root_ssh_pubkey=
disable_root=
username=
userpw=
user_ssh_pubkey=
user_is_admin=
cdebootstrap_cmdline=
bootsize=+128M
rootsize=
timeserver=time.nist.gov
timezone=Etc/UTC
locales=
system_default_locale=
ifname=eth0
ip_addr=dhcp
ip_netmask=0.0.0.0
ip_broadcast=0.0.0.0
ip_gateway=0.0.0.0
ip_nameservers=
drivers_to_load=
online_config=
usbroot=
cmdline="dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 elevator=deadline"
rootfstype=ext4

# these shouldn't really be changed unless auto-detection fails
bootdev=/dev/mmcblk0
bootpartition=/dev/mmcblk0p1
rootdev=/dev/mmcblk0
rootpartition=

fail()
{
    echo
    echo "Oh noes, something went wrong!"
    echo "You have 10 seconds to hit ENTER to get a shell..."

    # copy logfile to /boot/ partition to preserve it.
    # test whether the sd card is still mounted on /boot and if not, mount it.
    if [ ! -f /boot/bootcode.bin ] ; then
        mount $bootpartition /boot
        fail_boot_mounted=true
    fi
    cp $LOGFILE /boot/raspbian-ua-netinst-`date +%Y%m%dT%H%M%S`.log
    sync
    
    # if we mounted /boot in the fail command, unmount it.
    if [ "$fail_boot_mounted" = true ] ; then
        umount /boot
    fi

    read -t 10 || reboot && exit
    sh
}

sanitize_inputfile()
{
    if [ -z "$1" ]
    then
        echo "No input file specified!"
    else
        inputfile=$1
        # convert line endings to unix
        dos2unix $inputfile
    fi
}

# set screen blank period to an hour
# hopefully the install should be done by then
echo -en '\033[9;60]'

mkdir -p /proc
mkdir -p /sys
mkdir -p /boot
mkdir -p /usr/bin
mkdir -p /usr/sbin
mkdir -p /var/run
mkdir -p /rootfs/boot
mkdir -p /bootfs
mkdir -p /tmp/

/bin/busybox --install

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

mount -t proc none /proc
mount -t sysfs none /sys

echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s

klogd -c 1

# redirect stdout and stderr also to logfile
# http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself/6635197#6635197
mkfifo ${LOGFILE}.pipe
tee < ${LOGFILE}.pipe $LOGFILE &
exec &> ${LOGFILE}.pipe
rm ${LOGFILE}.pipe

RPI1_HARDWARE="BCM2708"
RPI2_HARDWARE="BCM2709"
rpi_hardware=$(grep Hardware /proc/cpuinfo | cut -d " " -f 2)
rpi_hardware_version="UNKNOWN !!"
kernel_meta_package=""

if [ "$rpi_hardware" = "$RPI1_HARDWARE" ] ; then
    rpi_hardware_version="1"
    kernel_meta_package="linux-image-rpi-rpfv"
elif [ "$rpi_hardware" = "$RPI2_HARDWARE" ] ; then
    rpi_hardware_version="2"
    kernel_meta_package="linux-image-rpi2-rpfv"
else
    echo ""
    echo "================================================="
    echo "     No Raspberry Pi hardware detected!!"
    echo " Value of rpi_hardware variable: '${rpi_hardware}'"
    echo "================================================="
    echo ""
fi

echo ""
echo "================================================="
echo "raspbian-ua-netinst"
echo "================================================="
echo "Revision __VERSION__"
echo "Built on __DATE__"
echo "Running on Raspberry Pi version ${rpi_hardware_version}"
echo "================================================="
echo "https://github.com/debian-pi/raspbian-ua-netinst/"
echo "================================================="

echo -n "Copying boot files... "
# copy boot data to safety
mount $bootpartition /boot || fail

cp -r /boot/* /bootfs/ || fail

umount /boot || fail
echo "OK"

if [ -e /bootfs/installer-config.txt ]; then
    echo "================================================="
    echo "=== Start executing installer-config.txt. ==="
    sanitize_inputfile /bootfs/installer-config.txt
    source /bootfs/installer-config.txt
    echo "=== Finished executing installer-config.txt. ==="
    echo "================================================="
fi

if [ -e /bootfs/config/wpa_supplicant.conf ]; then
    sanitize_inputfile /bootfs/config/wpa_supplicant.conf
fi

case "$rootfstype" in
  "btrfs")
    kernel_module=true
    rootfs_mkfs_options=${rootfs_mkfs_options:-'-f'}
    rootfs_install_mount_options=${rootfs_install_mount_options:-'noatime'}
    rootfs_mount_options=${rootfs_mount_options:-'noatime'}
    ;;
  "ext4")
    kernel_module=true
    rootfs_mkfs_options=${rootfs_mkfs_options:-''}
    rootfs_install_mount_options=${rootfs_install_mount_options:-'noatime,data=writeback,nobarrier,noinit_itable'}
    rootfs_mount_options=${rootfs_mount_options:-'errors=remount-ro,noatime'}
    ;;
  "f2fs")
    kernel_module=true
    rootfs_mkfs_options=${rootfs_mkfs_options:-''}
    rootfs_install_mount_options=${rootfs_install_mount_options:-'noatime'}
    rootfs_mount_options=${rootfs_mount_options:-'noatime'}
    ;;
esac

echo
echo "Network configuration:"
echo "  ip_addr = $ip_addr"

if [ "$ip_addr" != "dhcp" ]; then
    echo "  ip_netmask = $ip_netmask"
    echo "  ip_broadcast = $ip_broadcast"
    echo "  ip_gateway = $ip_gateway"
    echo "  ip_nameservers = $ip_nameservers"
fi

echo "  online_config = $online_config"
echo

# depmod needs to update modules.dep before using modprobe
depmod -a
if [ "$drivers_to_load" != "" ] ; then
   echo "Loading additional drivers."
   for driver in $drivers_to_load
   do
      echo -n " Loading driver '$driver' ... "
      modprobe $driver || fail
      if [ $? -eq 0 ] ; then
         echo "OK"
      else
         echo "FAILED !"
      fi
   done
   echo "Finished loading additional drivers"
fi

echo "Waiting for $ifname... "

for i in `seq 1 10`; do

    ifconfig $ifname &>/dev/null
    if [ $? -eq 0 ]; then
        break
    fi

    if [ $i -eq 10 ]; then
        echo "FAILED"
        fail
    fi

    sleep 1

    echo -n "$i.. "
done

if [ "$ifname" != "eth0" ]; then
    # Replace eth0 as udhcpc dns interface
    sed -i "s/PEERDNS_IF=.*/PEERDNS_IF=$ifname/g" /etc/udhcpc/default.script
    # if eth0 is not the chosen eth interface it is a wireless interface and wpa_supplicant must connect to wlan
    echo -n "Running wpa_supplicant... "
    wpa_supplicant -B -Dnl80211,wext -c/bootfs/config/wpa_supplicant.conf -i$ifname >& /dev/null || fail
    echo "OK"
fi

if [ "$ip_addr" = "dhcp" ]; then
    echo -n "Configuring $ifname with DHCP... "

    udhcpc -i $ifname &>/dev/null
    if [ $? -eq 0 ]; then
        ifconfig $ifname | fgrep addr: | awk '{print $2}' | cut -d: -f2
    else
        echo "FAILED"
        fail
    fi
else
    echo -n "Configuring $ifname with static ip $ip_addr... "
    ifconfig $ifname up inet $ip_addr netmask $ip_netmask broadcast $ip_broadcast || fail
    route add default gw $ip_gateway || fail
    echo -n > /etc/resolv.conf
    for i in $ip_nameservers; do
        echo "nameserver $i" >> /etc/resolv.conf
    done
    echo "OK"
fi

# This will record the time to get to this point
PRE_NETWORK_DURATION=$(date +%s)

date_set=false
if [ "$date_set" = "false" ] ; then
    # time server addresses taken from http://tf.nist.gov/tf-cgi/servers.cgi
    timeservers=$timeserver
    timeservers="$timeservers time.nist.gov nist1.symmetricom.com"
    timeservers="$timeservers nist-time-server.eoni.com utcnist.colorado.edu"
    timeservers="$timeservers nist1-pa.ustiming.org nist.expertsmi.com"
    timeservers="$timeservers nist1-macon.macon.ga.us wolfnisttime.com"
    timeservers="$timeservers nist.time.nosc.us nist.netservicesgroup.com"
    timeservers="$timeservers nisttime.carsoncity.k12.mi.us nist1-lnk.binary.net"
    timeservers="$timeservers ntp-nist.ldsbc.edu utcnist2.colorado.edu"
    timeservers="$timeservers nist1-ny2.ustiming.org wwv.nist.gov"
    for ts in $timeservers
    do
        rdate $ts &>/dev/null
        if [ $? -eq 0 ]; then
            echo -n "Time set using timeserver '$ts' to... "
            date
            date_set=true
            break
        else
            echo "Failed to set time using timeserver '$ts'."
        fi
    done
fi
if [ "$date_set" = "false" ] ; then
    echo "FAILED to set the date, so things are likely to fail now ..."
    echo "Make sure that rdate port 37 is not blocked by your firewall."
fi

# Record the time now that the time is set to a correct value
STARTTIME=$(date +%s)
# And substract the PRE_NETWORK_DURATION from STARTTIME to get the 
# REAL starting time.
REAL_STARTTIME=$(($STARTTIME - $PRE_NETWORK_DURATION))
echo ""
echo "Installation started at $(date --date="@$REAL_STARTTIME" --utc)."
echo ""

if [ "$online_config" != "" ]; then
    echo -n "Downloading online config from $online_config... "
    wget -q -O /online-config.txt $online_config &>/dev/null || fail
    echo "OK"

    echo "================================================="
    echo "=== Start executing online-config.txt. ==="
    sanitize_inputfile /online-config.txt
    source /online-config.txt
    echo "=== Finished executing online-config.txt. ==="
    echo "================================================="
fi

# check if we need the sudo package and add it if so
if [ "$user_is_admin" = "1" ]; then
    if [ -z "$packages" ]; then
        packages="sudo"
    else
        packages="$packages,sudo"
    fi        
fi

# configure different kinds of presets
if [ "$cdebootstrap_cmdline" = "" ]; then

    # minimal
    cdebootstrap_cmdline="--flavour=minimal --include=kmod,fake-hwclock,ifupdown,net-tools,ntp,openssh-server$dhcp_packages"

    # add dhcp client if using dhcp
    if [ "$ip_addr" = "dhcp" ]; then
        cdebootstrap_cmdline="$cdebootstrap_cmdline,isc-dhcp-client"
    fi

    # add latest kernel if rootfstype requires a module. 
    # Changed it so it is always installed.
    # Firmware can't be installed just yet, we'll do so at the end
    if [ "$kernel_module" = true ] ; then
        cdebootstrap_cmdline="$cdebootstrap_cmdline,${kernel_meta_package}"
    fi

    case $preset in
        minimal)
            ;;
        base)
            cdebootstrap_cmdline="--flavour=minimal"
            ;;
        *)
            cdebootstrap_cmdline="$cdebootstrap_cmdline,vim-tiny,iputils-ping,wget,ca-certificates,rsyslog,cron,dialog,locales,less,man-db"
            preset=server
            ;;
    esac

    # add extra packages
    if [ "$packages" != "" ]; then
        if [ "$preset" = "base" ]; then
            cdebootstrap_cmdline="$cdebootstrap_cmdline --include=$packages"
        else
            cdebootstrap_cmdline="$cdebootstrap_cmdline,$packages"
        fi
    fi

else
    preset=none
fi

if [ "$usbroot" = "1" ]; then
    rootdev=/dev/sda
    echo -n "Loading USB modules... "
    modprobe sd_mod &> /dev/null || fail
    modprobe usb-storage &> /dev/null || fail
    echo "OK"
fi

if [ "$rootpartition" = "" ]; then
    if [ "$rootdev" = "/dev/sda" ]; then
        rootpartition=/dev/sda1
    else
        rootpartition=/dev/mmcblk0p2
    fi
fi

echo
echo "Installer configuration:"
echo "  preset = $preset"
echo "  packages = $packages"
echo "  mirror = $mirror"
echo "  release = $release"
echo "  hostname = $hostname"
echo "  label = $label"
echo "  domainname = $domainname"
echo "  rootpw = $rootpw"
echo "  root_ssh_pubkey = $root_ssh_pubkey"
echo "  disable_root = $disable_root"
echo "  username = $username"
echo "  userpw = $userpw"
echo "  user_ssh_pubkey = $user_ssh_pubkey"
echo "  user_is_admin = $user_is_admin"
echo "  cdebootstrap_cmdline = $cdebootstrap_cmdline"
echo "  bootsize = $bootsize"
echo "  rootsize = $rootsize"
echo "  timeserver = $timeserver"
echo "  timezone = $timezone"
echo "  locales = $locales"
echo "  system_default_locale = $system_default_locale"
echo "  cmdline = $cmdline"
echo "  usbroot = $usbroot"
echo "  rootdev = $rootdev"
echo "  rootpartition = $rootpartition"
echo "  rootfstype = $rootfstype"
echo "  rootfs_mkfs_options = $rootfs_mkfs_options"
echo "  rootfs_install_mount_options = $rootfs_install_mount_options"
echo "  rootfs_mount_options = $rootfs_mount_options"
echo

echo -n "Waiting 5 seconds"
for i in `seq 1 5`; do
    echo -n "."
    sleep 1
done
echo

echo -n "Waiting for $rootdev... "
for i in `seq 1 10`; do

    if [ "`fdisk -l $rootdev 2>&1 | fgrep Disk`" != "" ]; then
        echo "OK"
        break
    fi

    if [ $i -eq 10 ]; then
        echo "FAILED"
        fail
    fi

    sleep 1

    echo -n "$i.. "
done

if [ "$rootdev" = "$bootdev" ]; then
    echo -n "Applying new partition table... "
    dd if=/dev/zero of=$bootdev bs=512 count=1 &>/dev/null
    fdisk $bootdev &>/dev/null <<EOF
n
p
1

$bootsize
t
b
n
p
2

$rootsize
w
EOF
    echo "OK"
else
    echo -n "Applying new partition table for $bootdev... "
    dd if=/dev/zero of=$bootdev bs=512 count=1 &>/dev/null
    fdisk $bootdev &>/dev/null <<EOF
n
p
1

$bootsize
t
b
w
EOF
    echo "OK"

    echo -n "Applying new partition table for $rootdev... "
    dd if=/dev/zero of=$rootdev bs=512 count=1 &>/dev/null
    fdisk $rootdev &>/dev/null <<EOF
n
p
1

$rootsize
w
EOF
    echo "OK"

fi

# refresh the /dev device nodes
mdev -s

echo -n "Initializing /boot as vfat... "
mkfs.vfat -n $label $bootpartition &>/dev/null || fail
echo "OK"

if [ "$kernel_module" = true ] ; then
  if [ "$rootfstype" != "ext4" ] ; then
    echo -n "Loading $rootfstype module... "
    modprobe $rootfstype &> /dev/null || fail
    echo "OK"
  fi
fi

echo -n "Initializing / as $rootfstype... "
mkfs.$rootfstype $rootfs_mkfs_options $rootpartition &>/dev/null || fail
echo "OK"

echo -n "Mounting new filesystems... "
mount $rootpartition /rootfs -o $rootfs_install_mount_options || fail
mkdir /rootfs/boot || fail
mount $bootpartition /rootfs/boot || fail
echo "OK"

echo -n "Copying /boot files in... "
cp -r /bootfs/* /rootfs/boot || fail
sync
echo "OK"

if [ "$kernel_module" = true ] ; then
  if [ "$rootfstype" != "ext4" ] ; then
    mkdir -p /rootfs/etc/initramfs-tools
    echo $rootfstype >> /rootfs/etc/initramfs-tools/modules
  fi
fi

echo "Starting install process..."
cdebootstrap-static --arch=armhf $cdebootstrap_cmdline $release /rootfs $mirror --keyring=/usr/share/keyrings/raspbian-archive-keyring.gpg || fail

# allow root login
echo "Configuring installed system:"
if [ ! "$disable_root" = "1" ]; then
    echo -n "  Setting root password... "
    echo -n root:$rootpw | chroot /rootfs /usr/sbin/chpasswd || fail
    echo "OK"
fi

# add SSH key for root (if provided)
if [ ! -z "$root_ssh_pubkey" ]; then
    echo -n "  Setting root SSH key... "
    mkdir -p /rootfs/root/.ssh && \
        chmod 700 /rootfs/root/.ssh && \
        echo "$root_ssh_pubkey" > /rootfs/root/.ssh/authorized_keys
    if [ $? -eq 0 ]; then
        echo "OK"
    else
        echo "FAILED !"
    fi
fi

# add user to system
if [ ! -z "$username" ]; then
    echo -n "  Creating user... "
    chroot /rootfs /usr/sbin/adduser "$username" --gecos "" --disabled-password
    if [ $? -eq 0 ]; then
        echo "OK"
        echo -n "  Setting user password... "
        echo -n $username:$userpw | chroot /rootfs /usr/sbin/chpasswd
        if [ $? -eq 0 ]; then
            echo "OK"
        else
            echo "FAILED !"
        fi
        if [ ! -z "$user_ssh_pubkey" ]; then
            echo -n "  Setting user SSH key... "
            ssh_dir="/home/$username/.ssh"
            mkdir -p "/rootfs$ssh_dir" && \
                chmod 700 "/rootfs$ssh_dir" && \
                echo "$user_ssh_pubkey" > "/rootfs$ssh_dir/authorized_keys"
            if [ $? -eq 0 ]; then
                echo "OK"
                echo -n "  Setting owner on SSH key... "
                chroot /rootfs /bin/chown -R "$username:$username" "$ssh_dir"
                if [ $? -eq 0 ]; then
                    echo "OK"
                else
                    echo "FAILED !"
                fi
            else
                echo "FAILED !"
            fi
        fi
        if [ "$user_is_admin" = "1" ]; then
            echo -n "  Adding $username to sudo group... "
            chroot /rootfs /usr/sbin/usermod -aG sudo "$username"
            echo "OK"
        fi
    else
        echo "FAILED !"
    fi
fi

# default mounts
echo -n "  Configuring /etc/fstab... "
echo "$bootpartition /boot vfat defaults 0 2" > /rootfs/etc/fstab || fail
if [ "$rootfstype" = "f2fs" ]; then
	echo "$rootpartition / $rootfstype $rootfs_mount_options 0 0" >> /rootfs/etc/fstab || fail
elif [ "$rootfstype" = "btrfs" ]; then
	echo "$rootpartition / $rootfstype $rootfs_mount_options 0 0" >> /rootfs/etc/fstab || fail
else
	echo "$rootpartition / $rootfstype $rootfs_mount_options 0 1" >> /rootfs/etc/fstab || fail
fi
echo "OK"

# use ram tmpfs by default
echo -n "  Configuring tmpfs to use RAM... "
echo "RAMTMP=yes" >> /rootfs/etc/default/tmpfs 
echo "OK"

# default hostname
echo -n "  Configuring hostname... "
echo -n $hostname > /rootfs/etc/hostname || fail
echo "127.0.0.1	localhost" > /rootfs/etc/hosts || fail
if [ "$domainname" = "" ]; then
     echo "127.0.1.1	$hostname" >> /rootfs/etc/hosts || fail
else
     echo "127.0.1.1	$hostname.$domainname	$hostname" >> /rootfs/etc/hosts || fail
fi
echo "OK"

# networking
echo -n "  Configuring network settings... "
echo "auto lo" > /rootfs/etc/network/interfaces || fail
echo "iface lo inet loopback" >> /rootfs/etc/network/interfaces || fail
echo "" >>  /rootfs/etc/network/interfaces || fail

# eth0 config
echo "auto $ifname" >> /rootfs/etc/network/interfaces || fail
if [ "$ip_addr" = "dhcp" ]; then
    echo "iface $ifname inet dhcp" >> /rootfs/etc/network/interfaces || fail
else
    echo "iface $ifname inet static" >> /rootfs/etc/network/interfaces || fail
    echo "    address $ip_addr" >> /rootfs/etc/network/interfaces || fail
    echo "    netmask $ip_netmask" >> /rootfs/etc/network/interfaces || fail
    echo "    broadcast $ip_broadcast" >> /rootfs/etc/network/interfaces || fail
    echo "    gateway $ip_gateway" >> /rootfs/etc/network/interfaces || fail

    cp /etc/resolv.conf /rootfs/etc/ || fail
fi
if [ "$ifname" != "eth0" ]; then
    echo "wpa-conf /boot/config/wpa_supplicant.conf" >> /rootfs/etc/network/interfaces || fail
fi
echo "OK"

# enable serial console on installed system
echo -n "  Enabling serial console... "
echo "#Spawn a getty on Raspberry Pi serial line" >> /rootfs/etc/inittab
echo "T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100" >> /rootfs/etc/inittab
echo "OK"

# set timezone and reconfigure tzdata package
echo -n "  Configuring tzdata, setting timezone to $timezone... "
echo "$timezone" > /rootfs/etc/timezone
chroot /rootfs /usr/sbin/dpkg-reconfigure -f noninteractive tzdata &> /dev/null
if [ $? -eq 0 ]; then
    echo "OK"
else
    echo "FAILED !"
fi

# generate locale data
if [ "$locales" != "" ]; then
    echo -n "  Enabling locales... "
    for locale in $locales; do
        echo -n "$locale... "
        if [ $(grep -c $locale /rootfs/etc/locale.gen) -gt 0 ]; then
            sed -i "s/^# \($locale .*\)/\1/" /rootfs/etc/locale.gen
        else
            echo -n "NOT found... "
        fi
    done
    echo "OK"
    chroot /rootfs /usr/sbin/locale-gen | sed 's/^/  /'
    if [ $? -ne 0 ]; then
        echo "  ERROR while generating locales !"
    fi
fi

# set system default locale
if [ "$system_default_locale" != "" ]; then
    echo -n "  Setting system default locale... "
    chroot /rootfs /usr/sbin/update-locale LANG="$system_default_locale" &> /dev/null
    if [ $? -eq 0 ]; then
        echo "OK"
    else
        echo "FAILED !"
    fi
fi

# openssh-server in jessie doesn't allow root to login using password anymore
# this hack does allow it (until a proper solution is implemented)
# only do this if no SSH key is provided for root and disabling root isn't requested
if [ -z "$root_ssh_pubkey" ]; then
    if [ ! "$disable_root" = "1" ]; then
        if [ "$release" = "jessie" ] ; then
            echo -n "  Allowing root to login with password... "
            sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /rootfs/etc/ssh/sshd_config || fail
            echo "OK"
        fi
    fi
fi

echo ""

# there is no hw clock on rpi
echo "HWCLOCKACCESS=no" >> /rootfs/etc/default/hwclock || fail


# remove cdebootstrap-helper-rc.d which prevents rc.d scripts from running
echo -n "Removing cdebootstrap-helper-rc.d... " 
chroot /rootfs /usr/bin/dpkg -r cdebootstrap-helper-rc.d &>/dev/null || fail
echo "OK"

# copy apt's sources.list to the target system
echo "Configuring apt:"
echo -n "  Copying raspbian repo to sources.list... "
cp /rootfs/boot/config/apt/sources.list /rootfs/etc/apt/sources.list || fail
echo "OK"
echo -n "  Replacing __RELEASE__ with $release... "
sed -i "s/__RELEASE__/$release/" /rootfs/etc/apt/sources.list
# if __RELEASE__ is still present, something went wrong
if grep -l '__RELEASE__' /rootfs/etc/apt/sources.list >/dev/null ; then
    echo "FAILED"
else
    echo "OK"
fi

echo "  Adding raspberrypi.org gpg key to apt-key."
cat /usr/share/keyrings/raspberrypi.gpg.key | chroot /rootfs /usr/bin/apt-key add - &>/dev/null

# save the current location so that we can go back to it later on
old_dir=$(pwd)
cd /rootfs/boot/config/apt/

# iterate through all the *.list files and add them to /etc/apt/sources.list.d
for listfile in *.list
do
    if [ $listfile != "sources.list" ] ; then
        echo -n "  Copying $listfile to /etc/apt/sources.list.d/... "
        cp $listfile /rootfs/etc/apt/sources.list.d/
        if [ $? -eq ] ; then
            echo "OK"
        else
            echo "FAILED"
        fi

        if grep -l '__RELEASE__' /rootfs/etc/apt/sources.list.d/$listfile >/dev/null ; then
            echo -n "  Replacing __RELEASE__ with $release in $listfile... "
            sed -i "s/__RELEASE__/$release/" /rootfs/etc/apt/sources.list.d/$listfile
            # if __RELEASE__ is still present, something went wrong
            if grep -l '__RELEASE__' /rootfs/etc/apt/sources.list.d/$listfile >/dev/null ; then
                echo "FAILED"
            else
                echo "OK"
            fi
        fi
    fi
done

# iterate through all the *.pref files and add them to /etc/apt/preferences.d
for preffile in *.pref
do
    echo -n "  Copying $preffile to /etc/apt/preferences.d/... "
    cp $preffile /rootfs/etc/apt/preferences.d/
    if [ $? -eq 0 ] ; then
        echo "OK"
    else
        echo "FAILED"
    fi

    if grep -l '__RELEASE__' /rootfs/etc/apt/preferences.d/$preffile >/dev/null ; then
        echo -n "  Replacing __RELEASE__ with $release in $preffile... "
        sed -i "s/__RELEASE__/$release/" /rootfs/etc/apt/preferences.d/$preffile
        # if __RELEASE__ is still present, something went wrong
        if grep -l '__RELEASE__' /rootfs/etc/apt/sources.list.d/$listfile >/dev/null ; then
            echo "FAILED"
        else
            echo "OK"
        fi
    fi
done

# iterate through all the *.key files and add them to apt-key
for keyfile in *.key
do
    echo "  Adding key $keyfile to apt."
    cat $keyfile | chroot /rootfs /usr/bin/apt-key add -
done

# return to the old location for the rest of the processing
cd $old_dir


echo -n "Updating package lists... "
chroot /rootfs /usr/bin/apt-get update &>/dev/null
echo "OK"

# firmware package can't be installed during cdebootstrap fase, so do so now
if [ "$kernel_module" = true ] ; then
  echo -n "Installing bootloader package (=firmware)... "
  chroot /rootfs /usr/bin/apt-get -y install raspberrypi-bootloader-nokernel &>/dev/null
  if [ $? -eq 0 ]; then
    echo "OK"
  else
    echo "FAILED !"
  fi
fi

# install libraspberrypi-bin to provide vcgencmd functionality
echo -n "Installing libraspberrypi-bin package (=vcgencmd,raspistill,raspivid,etc)... "
chroot /rootfs /usr/bin/apt-get -y install libraspberrypi-bin &>/dev/null
if [ $? -eq 0 ]; then
    echo "OK"
else
    echo "FAILED !"
fi

# if eth0 was not used during initial boot, a wireless interfaces was used
if [ "$ifname" != "eth0" ]; then
    # Install wireless dependencies
    echo -n "Installing wpasupplicant package... "
    chroot /rootfs /usr/bin/apt-get -y install wpasupplicant >& /dev/null
    if [ $? -eq 0 ]; then
        echo "OK"
    else
        echo "FAILED !"
    fi
fi

# add reasonable default modules, works only after kernel is properly installed
echo "snd-bcm2835" >> /rootfs/etc/modules

echo "Configuring bootloader to start the installed system..."
mv /rootfs/boot/config.txt /rootfs/boot/config-reinstall.txt

# find kernel/initramfs version
KERNEL_VERSION=$(sed -n -e "/^Package: ${kernel_meta_package}$/,/Package: /{s/^Depends: .*linux-image-\(.*-rpi2\{0,1\}\).*$/\1/p}" /rootfs/var/lib/dpkg/status)
echo "Kernel version: '${KERNEL_VERSION}'"

# no kernel-upgrade-script for the time being
# just add the kernel/initramfs lines to /boot/config.txt for now
if [ ! -f /rootfs/boot/config.txt ] ; then
    touch /rootfs/boot/config.txt
fi
echo "[pi${rpi_hardware_version}]" >> /rootfs/boot/config.txt
echo "kernel=vmlinuz-$KERNEL_VERSION" >> /rootfs/boot/config.txt
echo "initramfs initrd.img-${KERNEL_VERSION} followkernel" >> /rootfs/boot/config.txt

# set the default kernel file based on the hardware
default_kernel_file="kernel.img"
if [ "${rpi_hardware_version}" = "2" ] ; then
    default_kernel_file="kernel7.img"
fi

# make sure there is a /boot/kernel.img or /boot/kernel7.img present
if [ ! -f /rootfs/boot/${default_kernel_file} ] ; then
    echo -n "Copying kernel to /boot/${default_kernel_file}... "
    cp /rootfs/boot/vmlinuz-${KERNEL_VERSION} /rootfs/boot/${default_kernel_file}
    if [ $? -eq 0 ]; then
        echo "OK"
    else
        echo "FAILED !"
    fi
fi

# default cmdline.txt
echo -n "Creating default cmdline.txt... "
echo "$cmdline root=$rootpartition rootfstype=$rootfstype rootwait" > /rootfs/boot/cmdline.txt
echo "OK"

# run post install script if exists
if [ -e /bootfs/post-install.txt ]; then
    echo "================================================="
    echo "=== Start executing post-install.txt. ==="
    sanitize_inputfile /bootfs/post-install.txt
    source /bootfs/post-install.txt
    echo "=== Finished executing post-install.txt. ==="
    echo "================================================="
fi

# save current time if fake-hwclock
echo "Saving current time for fake-hwclock..."
sync # synchronize before saving time to make it "more accurate"
date +"%Y-%m-%d %H:%M:%S" > /rootfs/etc/fake-hwclock.data

ENDTIME=$(date +%s)
DURATION=$(($ENDTIME - $REAL_STARTTIME))
echo -n "Installation finished at $(date --date="@$ENDTIME" --utc)"
echo " and took $(($DURATION/60)) min $(($DURATION%60)) sec ($DURATION seconds)"

echo -n "Unmounting filesystems... "
# copy logfile to standard log directory
cp $LOGFILE /rootfs/var/log/raspbian-ua-netinst.log
chmod 0640 /rootfs/var/log/raspbian-ua-netinst.log

umount /rootfs/boot
umount /rootfs
echo "OK"

echo -n "Finished! Rebooting to installed system in 5 seconds..."
for i in `seq 5 -1 1`; do
    sleep 1

    echo -n "$i.. "
done
echo " rebooting now"
reboot
